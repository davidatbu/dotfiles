#!/usr/bin/env python3
from abc import ABC , abstractmethod
import sys
import csv
from argparse import ArgumentParser

from typing import Dict , Iterable , Iterator




class Aggregator(ABC):
    @abstractmethod
    def __call__(self, items: Iterable[str]) -> object:
        pass

class OneOutputAggregator(Aggregator):
    @abstractmethod
    def __call__(self, items: Iterable[str]) -> float:
        pass


class PerRowAggregator(Aggregator):
    @abstractmethod
    def __call__(self, items: Iterable[str]) -> Iterator[float]:
        pass

class Accum(PerRowAggregator):
    def __call__(self, items: Iterable[str]) -> Iterator[float]:
        agg = 0.
        for i in items:
            agg += float(i)
            yield agg

AGGREGATIONS: Dict[str, Aggregator] = {
    "accum": Accum()
}

def main():
    parser = ArgumentParser()
    parser.add_argument(
        "aggregator", help="Choose from: %s" % ", ".join(AGGREGATIONS.keys())
    )
    args = parser.parse_args()

    lines = [line for line in csv.reader(sys.stdin)]
    lengths = set([len(l) for l in lines])
    assert len(lengths) == 1 and lengths.pop() == 1

    lines = [line[0] for line in lines]

    try:
        agg = AGGREGATIONS[args.aggregator]

        if isinstance(agg, PerRowAggregator):
            for line in agg(lines):
                print(line)

    except ValueError:
        print(
            "Couldn't convert at least one of the following to float: %s",
            ", ".join(lines),
            file=sys.stderr,
        )


if __name__ == "__main__":
    main()

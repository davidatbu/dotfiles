snippet log "setup logging"
import logging
logger = logging.getLogger(__name__)
endsnippet

snippet ifm "ifmain"
if __name__ == "__main__":
    logging.basicConfig()
    logger.setLevel(logging.DEBUG)
    main()
endsnippet


snippet Test "Test" bm
class Test${1:Class}(unittest.TestCase):
    ${3:def setUp(self) -> None:
        super().setUp()
        ${2:pass}}

    def test_${4:it}(self) -> None:
        ${5:pass}
endsnippet

snippet subTest "subTest" b
with self.subTest("${1:subtest_name}"):
    ${2:pass}
endsnippet

snippet -> "none type"
-> None:
    ${1}
endsnippet

snippet sup "super()." m
super().
endsnippet

snippet impt "import typing as T" bm
import typing as T
endsnippet

snippet imptt "import typing_extensions as TT" bm
import typing_extensions as TT
endsnippet

snippet impp "from pathlib import Path" bm
from pathlib import Path
endsnippet


# Make it easier to use Mypy
snippet "(Any|Protocol)" "Mypy Types" r
`!p
word_that_triggered = match.groups()[0]
snip.rv = "T." + word_that_triggered
`
endsnippet
snippet "(Type|List|Literal|Dict|Optional|Tuple|Set|Final|Generic|Union|Callable)" "Mypy Types" r
T.`!p snip.rv = match.groups()[0]`[${1}]${2}
endsnippet
snippet TypeVar "TypeVar" b
${1} = T.TypeVar("$1", ${3:bound=${2:something to subclass}})
endsnippet


snippet ifmain "unittest ifmain" "'import unittest' in list(snip.buffer)" bme
if __name__ == "__main__":
    unittest.main()
endsnippet


# TYPE_CHECKING only base classes for mixins
snippet _MixinBase "_MixinBase" bm
if T.TYPE_CHECKING:
    _MixinBase = object
else:
    _MixinBase = ${1:unittest.TestCase}
endsnippet

snippet TYPE_CHECKING "if T.TYPE_CHECKING" bm
if T.TYPE_CHECKING:
    ${1:pass}
else:
    ${2:pass}
endsnippet

